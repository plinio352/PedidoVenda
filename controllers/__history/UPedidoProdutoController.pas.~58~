unit UPedidoProdutoController;

interface

uses
   UDmVenda, UPedidoProduto, System.SysUtils, Generics.Collections, Data.DB;


type
   IPedidoProdutoController = interface
      function Getobj: TPedidoProduto;
      procedure Setobj(const Value: TPedidoProduto);
      function lstPedidoProduto: OleVariant;
      function incluir: TList<TPedidoProduto>;
      function alterar(const Value: TList<TPedidoProduto>): TList<TPedidoProduto>;
      function excluir(const Value: TList<TPedidoProduto>): TPedidoProduto;
      function GetLst: TList<TPedidoProduto>;
      procedure Setadd(const Value: TPedidoProduto);

      property obj: TPedidoProduto read Getobj write Setobj;
      property add: TPedidoProduto write Setadd;

   end;

   TPedidoProdutoController = class(TInterfacedObject, IPedidoProdutoController)
   private
      Fobj: TPedidoProduto;
      FLst: TList<TPedidoProduto>;

      function Getobj: TPedidoProduto;
      procedure Setobj(const Value: TPedidoProduto);
      function GetLst: TList<TPedidoProduto>;
      procedure Setadd(const Value: TPedidoProduto);
      function BuscaPedidoProduto(const Value: Integer):TList<TPedidoProduto>;


   public
      function lstPedidoProduto: OleVariant;
      function incluir: TList<TPedidoProduto>;
      function alterar(const Value: TList<TPedidoProduto>): TList<TPedidoProduto>;
      function excluir(const Value: TList<TPedidoProduto>): TPedidoProduto;

      constructor Create;
      destructor Destroy; override;


      property obj: TPedidoProduto read Getobj write Setobj;
      property add: TPedidoProduto write Setadd;
   end;
implementation


{ TPedidoProdutoController }

function TPedidoProdutoController.alterar(const Value: TList<TPedidoProduto>): TList<TPedidoProduto>;
var
   obj: TPedidoProduto;
begin
   Result := TList<TPedidoProduto>.Create;

   dmVenda.BeginTran;

   try
      for obj in Value do
      begin
         if dmVenda.qryPedidoProduto.Locate('numero_pedido', Self.Fobj.numeroPedido.numeroPedido, [loCaseInsensitive]) then begin
            dmVenda.qryPedidoProduto.Edit;
            dmVenda.qryPedidoProduto.FieldByName('numero_pedido').Value    := Self.Fobj.numeroPedido.numeroPedido;
            dmVenda.qryPedidoProduto.FieldByName('codigo_produto').Value   := Self.Fobj.codigoProduto.codigo;
            dmVenda.qryPedidoProduto.FieldByName('quantidade').Value       := Self.Fobj.quantidade;
            dmVenda.qryPedidoProduto.FieldByName('valor_unitario').Value   := Self.Fobj.valorUnitario;
            Self.Fobj.valorTotal := Self.Fobj.quantidade * Self.Fobj.valorUnitario;
            dmVenda.qryPedidoProduto.FieldByName('valor_total').Value      := Self.Fobj.valorTotal;
            dmVenda.qryPedidoProduto.Post;
         end;

      end;

      Result := BuscaPedidoProduto(Self.Fobj.numeroPedido.numeroPedido);

      dmVenda.CommitTran;
   except on E: Exception do

      dmVenda.RollbackTran;

   end;

end;

function TPedidoProdutoController.BuscaPedidoProduto(
  const Value: Integer): TList<TPedidoProduto>;
var
  obj: TPedidoProduto;
begin
   Result := TList<TPedidoProduto>.Create;

   dmVenda.qryLstPedPro.Close;
   dmVenda.qryLstPedPro.ParamByName('Pnumero_pedido').Value := Value;

   dmVenda.cdsLstPedPro.Close;
   dmVenda.cdsLstPedPro.Open;
   dmVenda.cdsLstPedPro.First;
   while not (dmVenda.cdsLstPedPro.Eof) do
   begin
      obj                           := TPedidoProduto.Create;
      obj.id                        := dmVenda.cdsLstPedPro.FieldByName('id').Value;

      obj.numeroPedido              := iPedGerCont. iProCont.BuscaProduto( dmVenda.cdsLstPedPro.FieldByName('numero_pedido').Value;
      obj.codigoProduto.codigo      := dmVenda.cdsLstPedPro.FieldByName('codigo_produto').Value;

      obj.quantidade                := dmVenda.cdsLstPedPro.FieldByName('quantidade').Value;
      obj.valorUnitario             := dmVenda.cdsLstPedPro.FieldByName('valor_unitario').Value;
      obj.valorTotal                := dmVenda.cdsLstPedPro.FieldByName('valor_total').Value;

      Result.Add(obj);
      dmVenda.cdsLstPedPro.Next;

   end;

end;

constructor TPedidoProdutoController.Create;
begin
   inherited;
   Self.FLst := TList<TPedidoProduto>.Create;

   iPedGerCont := TPedidoDadosGeraisController.Create;
   iProCont := TProdutoController.Create;

end;

destructor TPedidoProdutoController.Destroy;
begin
   FreeAndNil(Self.FLst);
  inherited;
end;

function TPedidoProdutoController.excluir(const Value: TList<TPedidoProduto>): TPedidoProduto;
var
   obj: TPedidoProduto;
begin
   dmVenda.BeginTran;

   try
      for obj in Value do
      begin
         if dmVenda.qryPedidoProduto.Locate('numero_pedido', Self.Fobj.numeroPedido.numeroPedido, [loCaseInsensitive]) then begin
            dmVenda.qryPedidoProduto.Delete;
         end;

      end;

      Result := Self.Fobj;

      dmVenda.CommitTran;
   except on E: Exception do

      dmVenda.RollbackTran;
   end;

end;

function TPedidoProdutoController.GetLst: TList<TPedidoProduto>;
begin
   Result := Self.FLst;
end;

function TPedidoProdutoController.Getobj: TPedidoProduto;
begin
   Result := Self.Fobj;

end;

function TPedidoProdutoController.incluir: TList<TPedidoProduto>;
var
   obj: TPedidoProduto;
const
   sql = 'INSERT INTO pedidos_produtos(numero_pedido, codigo_produto, quantidade, valor_unitario, valor_total) '+
         'VALUES (:numero_pedido, :codigo_produto, :quantidade, :valor_unitario, :valor_total)';
begin
   Result := TList<TPedidoProduto>.Create;

   dmVenda.BeginTran;

   try
      for obj in Self.FLst do
      begin
         obj.valorTotal := obj.quantidade * obj.valorUnitario;

         dmVenda.exPedPro.CommandText := sql;
         dmVenda.exPedPro.ParamByName('numero_pedido').Value    := obj.numeroPedido.numeroPedido;
         dmVenda.exPedPro.ParamByName('codigo_produto').Value   := obj.codigoProduto.codigo;
         dmVenda.exPedPro.ParamByName('quantidade').Value       := obj.quantidade;
         dmVenda.exPedPro.ParamByName('valor_unitario').Value   := obj.valorUnitario;
         dmVenda.exPedPro.ParamByName('valor_total').Value      := obj.valorTotal;
         dmVenda.exPedPro.ExecSQL;

      end;

      Result := BuscaPedidoProduto(obj.numeroPedido.numeroPedido);

      dmVenda.CommitTran;
   except on E: Exception do

      dmVenda.RollbackTran;
   end;

end;

function TPedidoProdutoController.lstPedidoProduto: OleVariant;
begin
   dmVenda.qryPedidoProduto.Close;
   dmVenda.qryPedidoProduto.Open;

   Result := dmVenda.dspPedidoProduto.Data;

end;

procedure TPedidoProdutoController.Setadd(const Value: TPedidoProduto);
begin
  FLst.Add(Value);
end;

procedure TPedidoProdutoController.Setobj(const Value: TPedidoProduto);
begin
  Fobj := Value;
end;

end.
